#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const { spawn } = require("child_process");

// Try to require the 'glob' package
let glob;
try {
  // Attempt to load locally installed module
  glob = require("glob");
} catch (error) {
  console.error(
    "The 'glob' package is required but not installed. Install it locally with 'npm install' once in your ~/scripts/inline-copy folder."
  );
  process.exit(1);
}

const patterns = process.argv.slice(2);

if (patterns.length === 0) {
  console.error("Please provide at least one file pattern.");
  process.exit(1);
}

let files = [];

patterns.forEach((pattern) => {
  const matches = glob.sync(pattern, { nodir: true });
  if (matches.length === 0) {
    console.error(`No files matched pattern "${pattern}".`);
  } else {
    files = files.concat(matches);
  }
});

if (files.length === 0) {
  console.error("No files to process.");
  process.exit(1);
}

let output = "###\n\n";

files.forEach((file) => {
  const filePath = path.resolve(process.cwd(), file);
  let content;

  try {
    content = fs.readFileSync(filePath, "utf8");
  } catch (err) {
    console.error(`Error reading file "${file}": ${err.message}`);
    process.exit(1);
  }

  output += "---\n";
  output += `File: "${file}"\n\n`;
  output += "```\n";
  output += `${content}\n`;
  output += "```\n";
  output += "---\n\n";
});

output += "###\n";

console.log(output);

// Copy output to clipboard using 'pbcopy' command
const pbcopy = spawn("pbcopy");
pbcopy.stdin.write(output);
pbcopy.stdin.end();
